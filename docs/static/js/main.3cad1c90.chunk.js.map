{"version":3,"sources":["App.js","reportWebVitals.js","aws-exports.js","index.js"],"names":["App","useState","coins","updateCoins","fetchCoins","a","updateLoading","limit","input","start","API","get","data","console","log","error","useEffect","updateInput","updateInputValues","type","value","loading","className","placeholder","onChange","e","target","onClick","map","coin","index","name","symbol","price_usd","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAmGeA,EAzFH,WAAM,MAGaC,mBAAS,IAHtB,mBAGTC,EAHS,KAGFC,EAHE,KAQVC,EAAU,uCAAG,gCAAAC,EAAA,sEAIfC,GAAc,GAENC,EAAiBC,EAAjBD,MAAOE,EAAUD,EAAVC,MANA,SAOIC,IAAIC,IAAI,YAAR,uBAAqCJ,EAArC,kBAAoDE,IAPxD,OAOTG,EAPS,OASfT,EAAYS,EAAKV,OAEjBW,QAAQC,IAAIZ,GAEZI,GAAc,GAbC,kDAiBfO,QAAQE,MAAR,MAjBe,0DAAH,qDAuChBC,qBAAU,WACRZ,MACC,IAjDa,MAoDaH,mBAAS,CAAEM,MAAO,GAAIE,MAAO,IApD1C,mBAoDTD,EApDS,KAoDFS,EApDE,KAuDhB,SAASC,EAAkBC,EAAMC,GAC/BH,EAAY,2BAAKT,GAAN,kBAAcW,EAAOC,KAxDlB,MA2DiBnB,oBAAS,GA3D1B,mBA2DToB,EA3DS,KA2DAf,EA3DA,KA6DhB,OACE,sBAAKgB,UAAU,MAAf,UAEA,uBACEC,YAAY,yBACZC,SAAU,SAAAC,GAAC,OAAIP,EAAkB,QAASO,EAAEC,OAAON,UAErD,uBACEI,SAAU,SAAAC,GAAC,OAAIP,EAAkB,QAASO,EAAEC,OAAON,QACnDG,YAAY,kBAEd,wBAAQI,QAASvB,EAAjB,yBAECiB,GAAW,6CAGPA,GACDnB,EAAM0B,KAAI,SAACC,EAAMC,GAAP,OACR,gCACE,+BAAKD,EAAKE,KAAV,MAAmBF,EAAKG,UACxB,mCAAMH,EAAKI,eAFHH,UC7ELI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCQCQ,EAZG,CACd,mBAAsB,YACtB,uBAA0B,CACtB,CACI,KAAQ,YACR,SAAY,+DACZ,OAAU,e,MCAtBC,QAAQC,UAAUC,GAElBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.3cad1c90.chunk.js","sourcesContent":["import React,\n  {\n    useState,\n    useEffect\n  }\nfrom 'react';\n\nimport { API } from 'aws-amplify';\nimport './App.css';\n\nconst App = () => {\n\n  // Create coins variable and set to empty array\n  const [coins, updateCoins] = useState([]);\n  //let coins = [];\n\n  // Define function to all API\n  //async function fetchCoins() {\n  const fetchCoins = async () => {\n\n    try {\n\n      updateLoading(true);\n\n      const { limit, start } = input\n      const data = await API.get('cryptoapi', `/coins?limit=${limit}&start=${start}`)\n      \n      updateCoins(data.coins)\n      //coins = data.coins;\n      console.log(coins);\n  \n      updateLoading(false);\n      }\n  \n    catch (err) {\n      console.error(err);\n    }\n\n  }\n\n  // Promise verson of above async await code (loading may not work)\n\n  // const fetchCoins = () => {\n  //   updateLoading(true);\n  //\n  //   const { limit, start } = input;\n  //\n  //   API.get('apif65452a3', `/coins?limit=${limit}&start=${start}`)\n  //     .then(response => updateCoins(response.coins))\n  //     .catch(err => console.error(err))\n  //   ;\n  //\n  //   updateLoading(false);\n  //\n  // };\n\n  // Call fetchCoins function when component loads\n  useEffect(() => {\n    fetchCoins()\n  }, [])\n\n  // Create additional state to hold user input for limit and start properties\n  const [input, updateInput] = useState({ limit: 50, start: 0 })\n\n  // Create a new function to allow users to update the input values\n  function updateInputValues(type, value) {\n    updateInput({ ...input, [type]: value })\n  }\n\n  const [loading, updateLoading] = useState(true);\n\n  return (\n    <div className=\"App\">\n\n    <input\n      placeholder=\"Enter a Starting Index\"\n      onChange={e => updateInputValues('start', e.target.value)}\n    />\n    <input\n      onChange={e => updateInputValues('limit', e.target.value)}\n      placeholder=\"Enter a Limit\"\n    />\n    <button onClick={fetchCoins}>Fetch Coins</button>\n\n    {loading && <h2>Loading...</h2>}\n\n      { \n        !loading &&\n        coins.map((coin, index) => (\n          <div key={index}>\n            <h2>{coin.name} - {coin.symbol}</h2>\n            <h5>${coin.price_usd}</h5>\n          </div>\n        ))\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_cloud_logic_custom\": [\n        {\n            \"name\": \"cryptoapi\",\n            \"endpoint\": \"https://vkznrxb43k.execute-api.us-east-2.amazonaws.com/local\",\n            \"region\": \"us-east-2\"\n        }\n    ]\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\n\nAmplify.configure(config);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}